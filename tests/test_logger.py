"""
–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è logger.py
"""

import pytest
import tempfile
import os
import logging
from pathlib import Path
from unittest.mock import patch, MagicMock

from src.logger import (
    FileMigratorLogger, 
    setup_logger, 
    get_logger,
    ColoredFormatter
)
from src.config_loader import LoggingConfig


class TestColoredFormatter:
    """–¢–µ—Å—Ç—ã –¥–ª—è ColoredFormatter."""
    
    def test_colored_formatter(self):
        """–¢–µ—Å—Ç —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä–∞."""
        formatter = ColoredFormatter(
            fmt='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å –ª–æ–≥–∞
        record = logging.LogRecord(
            name='test',
            level=logging.INFO,
            pathname='',
            lineno=0,
            msg='Test message',
            args=(),
            exc_info=None
        )
        
        formatted = formatter.format(record)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        assert '\033[32m' in formatted or '\x1b[32m' in formatted  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è INFO
        assert '\033[0m' in formatted or '\x1b[0m' in formatted   # –°–±—Ä–æ—Å —Ü–≤–µ—Ç–∞
        assert 'Test message' in formatted
        assert 'INFO' in formatted  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –≤—ã–≤–æ–¥–µ


class TestFileMigratorLogger:
    """–¢–µ—Å—Ç—ã –¥–ª—è FileMigratorLogger."""
    
    @pytest.fixture
    def temp_log_config(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.log', delete=False) as f:
            temp_log_file = f.name
        
        config = LoggingConfig(
            level='DEBUG',
            log_file=Path(temp_log_file),
            max_log_size=1,  # 1 MB
            backup_count=3
        )
        
        yield config
        
        # –û—á–∏—Å—Ç–∫–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–æ–≥–≥–µ—Ä–∞
        logger = logging.getLogger('file_migrator')
        for handler in logger.handlers[:]:
            handler.close()
            logger.removeHandler(handler)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_log_file)
        except (FileNotFoundError, PermissionError):
            pass
    
    def test_logger_initialization(self, temp_log_config):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞."""
        logger = FileMigratorLogger(temp_log_config)
        assert logger.logger is not None
        assert logger.logger.name == 'file_migrator'
        assert logger.logger.level == logging.DEBUG
    
    def test_logger_handlers(self, temp_log_config):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ª–æ–≥–≥–µ—Ä–∞."""
        logger = FileMigratorLogger(temp_log_config)
        handlers = logger.logger.handlers
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: —Ñ–∞–π–ª–æ–≤—ã–π –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π
        assert len(handlers) == 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handler_types = [type(h).__name__ for h in handlers]
        assert 'RotatingFileHandler' in handler_types
        assert 'StreamHandler' in handler_types
    
    def test_log_migration_start(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            logger.log_migration_start(1000, 100)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑–≤–∞–Ω–æ 4 —Ä–∞–∑–∞ (4 —Å–æ–æ–±—â–µ–Ω–∏—è)
            assert mock_info.call_count == 4
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            calls = [call[0][0] for call in mock_info.call_args_list]
            assert any("üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤" in call for call in calls)
            assert any("üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: 1000" in call for call in calls)
            assert any("üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: 100" in call for call in calls)
    
    def test_log_migration_end(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            logger.log_migration_end(100, 95, 5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤
            assert mock_info.call_count == 6  # 6 —Å–æ–æ–±—â–µ–Ω–∏–π
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            calls = [call[0][0] for call in mock_info.call_args_list]
            assert any("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞" in call for call in calls)
            assert any("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:" in call for call in calls)
            assert any("‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 100" in call for call in calls)
            assert any("‚Ä¢ –£—Å–ø–µ—à–Ω–æ: 95" in call for call in calls)
            assert any("‚Ä¢ –û—à–∏–±–æ–∫: 5" in call for call in calls)
    
    def test_log_file_moved(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            source_path = Path("old/path/file.txt")
            target_path = Path("new/path/file.txt")
            logger.log_file_moved("file001", source_path, target_path)
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "üìÅ –§–∞–π–ª file001 –ø–µ—Ä–µ–º–µ—â–µ–Ω:" in call_args
            assert "old/path/file.txt" in call_args or "old\\path\\file.txt" in call_args
            assert "new/path/file.txt" in call_args or "new\\path\\file.txt" in call_args
    
    def test_log_file_error(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ —Ñ–∞–π–ª–∞."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'error') as mock_error:
            error = FileNotFoundError("File not found")
            logger.log_file_error("file001", error)
            
            mock_error.assert_called_once()
            call_args = mock_error.call_args[0][0]
            assert "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ file001:" in call_args
            assert "File not found" in call_args
    
    def test_log_database_error(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –ë–î."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'error') as mock_error:
            error = ConnectionError("Connection failed")
            logger.log_database_error("SELECT", error)
            
            mock_error.assert_called_once()
            call_args = mock_error.call_args[0][0]
            assert "üóÑÔ∏è –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ SELECT:" in call_args
            assert "Connection failed" in call_args
    
    def test_log_progress(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            logger.log_progress(50, 100)
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 50/100 (50.0%)" in call_args
    
    def test_log_progress_with_percentage(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            logger.log_progress(30, 100, 30.0)
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: 30/100 (30.0%)" in call_args
    
    def test_log_batch_start(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –±–∞—Ç—á–∞."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            logger.log_batch_start(1, 50)
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ #1 (—Ä–∞–∑–º–µ—Ä: 50)" in call_args
    
    def test_log_batch_end(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–∞—Ç—á–∞."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            logger.log_batch_end(1, 50, 48, 2)
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "‚úÖ –ë–∞—Ç—á #1 –∑–∞–≤–µ—Ä—à–µ–Ω: 48/50 —É—Å–ø–µ—à–Ω–æ, 2 –æ—à–∏–±–æ–∫" in call_args
    
    def test_log_config_loaded(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            logger.log_config_loaded("config/settings.ini")
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ config/settings.ini" in call_args
    
    def test_log_database_connected(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            logger.log_database_connected("test_db", "localhost", 3306)
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: test_db@localhost:3306" in call_args
    
    def test_log_database_disconnected(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ë–î."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            logger.log_database_disconnected()
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ" in call_args
    
    def test_log_file_operation(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            file_path = Path("test/file.txt")
            logger.log_file_operation("read", file_path, True)
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "‚úÖ READ: test/file.txt" in call_args or "‚úÖ READ: test\\file.txt" in call_args
    
    def test_log_file_operation_failed(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ñ–∞–π–ª–æ–º."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            file_path = Path("test/file.txt")
            logger.log_file_operation("write", file_path, False)
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "‚ùå WRITE: test/file.txt" in call_args or "‚ùå WRITE: test\\file.txt" in call_args
    
    def test_log_system_info(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'info') as mock_info:
            logger.log_system_info("System started")
            
            mock_info.assert_called_once()
            call_args = mock_info.call_args[0][0]
            assert "‚ÑπÔ∏è System started" in call_args
    
    def test_log_warning(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'warning') as mock_warning:
            logger.log_warning("Low disk space")
            
            mock_warning.assert_called_once()
            call_args = mock_warning.call_args[0][0]
            assert "‚ö†Ô∏è Low disk space" in call_args
    
    def test_log_critical_error(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'critical') as mock_critical:
            error = RuntimeError("System failure")
            logger.log_critical_error("Critical system error", error)
            
            mock_critical.assert_called_once()
            call_args = mock_critical.call_args[0][0]
            assert "üí• Critical system error:" in call_args
            assert "System failure" in call_args
    
    def test_log_critical_error_without_exception(self, temp_log_config):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è."""
        logger = FileMigratorLogger(temp_log_config)
        
        with patch.object(logger.logger, 'critical') as mock_critical:
            logger.log_critical_error("Critical system error")
            
            mock_critical.assert_called_once()
            call_args = mock_critical.call_args[0][0]
            assert "üí• Critical system error" in call_args
    
    def test_get_logger(self, temp_log_config):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞."""
        logger = FileMigratorLogger(temp_log_config)
        returned_logger = logger.get_logger()
        
        assert returned_logger is logger.logger
        assert returned_logger.name == 'file_migrator'


class TestSetupLogger:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ setup_logger."""
    
    def test_setup_logger(self):
        """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞."""
        config = LoggingConfig(
            level='INFO',
            log_file=Path('test.log'),
            max_log_size=1,
            backup_count=3
        )
        
        logger = setup_logger(config)
        
        assert logger is not None
        assert logger.name == 'file_migrator'
        assert logger.level == logging.INFO


class TestGetLogger:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_logger."""
    
    def test_get_logger_default_name(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        logger = get_logger()
        assert logger.name == 'file_migrator'
    
    def test_get_logger_custom_name(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–º–µ–Ω–µ–º."""
        logger = get_logger('custom_logger')
        assert logger.name == 'custom_logger'


if __name__ == "__main__":
    pytest.main([__file__, "-v"])
