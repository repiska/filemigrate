"""
–ú–æ–¥—É–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤,
—Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.
"""

import logging
import logging.handlers
import sys
from pathlib import Path
from typing import Optional
from datetime import datetime

try:
    from .config_loader import LoggingConfig
except ImportError:
    from config_loader import LoggingConfig


class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏."""
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI
    COLORS = {
        'DEBUG': '\033[36m',      # Cyan
        'INFO': '\033[32m',       # Green
        'WARNING': '\033[33m',    # Yellow
        'ERROR': '\033[31m',      # Red
        'CRITICAL': '\033[35m',   # Magenta
        'RESET': '\033[0m'        # Reset
    }
    
    def format(self, record):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å —Ü–≤–µ—Ç–æ–º."""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –∫ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if record.levelname in self.COLORS:
            record.levelname = f"{self.COLORS[record.levelname]}{record.levelname}{self.COLORS['RESET']}"
        
        return super().format(record)


class FileMigratorLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è File Migrator."""
    
    def __init__(self, config: LoggingConfig):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞.
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.config = config
        self.logger: Optional[logging.Logger] = None
        self._setup_logger()
    
    def _setup_logger(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å —Ñ–∞–π–ª–æ–≤—ã–º –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º."""
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        self.logger = logging.getLogger('file_migrator')
        self.logger.setLevel(getattr(logging, self.config.level.upper()))
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            fmt='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        colored_formatter = ColoredFormatter(
            fmt='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ª–æ–≥–æ–≤
        log_file_path = Path(self.config.log_file)
        log_file_path.parent.mkdir(parents=True, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
        file_handler = logging.handlers.RotatingFileHandler(
            filename=log_file_path,
            maxBytes=self.config.max_log_size * 1024 * 1024,  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MB –≤ –±–∞–π—Ç—ã
            backupCount=self.config.backup_count,
            encoding='utf-8'
        )
        file_handler.setFormatter(formatter)
        file_handler.setLevel(getattr(logging, self.config.level.upper()))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(colored_formatter)
        console_handler.setLevel(getattr(logging, self.config.level.upper()))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)
        
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.logger.propagate = False
    
    def get_logger(self) -> logging.Logger:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä.
        
        Returns:
            logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        """
        if self.logger is None:
            raise RuntimeError("–õ–æ–≥–≥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return self.logger
    
    def log_migration_start(self, total_files: int, batch_size: int) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏.
        
        Args:
            total_files: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        """
        self.logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤")
        self.logger.info(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        self.logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        self.logger.info(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    def log_migration_end(self, processed_files: int, successful_files: int, failed_files: int) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏.
        
        Args:
            processed_files: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤
            successful_files: –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ
            failed_files: –û—à–∏–±–æ–∫ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        """
        self.logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.logger.info(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_files}")
        self.logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful_files}")
        self.logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {failed_files}")
        self.logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    def log_batch_start(self, batch_number: int, batch_size: int) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞.
        
        Args:
            batch_number: –ù–æ–º–µ—Ä –±–∞—Ç—á–∞
            batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        """
        self.logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ #{batch_number} (—Ä–∞–∑–º–µ—Ä: {batch_size})")
    
    def log_batch_end(self, batch_number: int, processed: int, successful: int, failed: int) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞.
        
        Args:
            batch_number: –ù–æ–º–µ—Ä –±–∞—Ç—á–∞
            processed: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤
            successful: –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ
            failed: –û—à–∏–±–æ–∫
        """
        self.logger.info(f"‚úÖ –ë–∞—Ç—á #{batch_number} –∑–∞–≤–µ—Ä—à–µ–Ω: {successful}/{processed} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
    
    def log_file_moved(self, idfl: str, source_path: Path, target_path: Path) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞.
        
        Args:
            idfl: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
            source_path: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å
            target_path: –¶–µ–ª–µ–≤–æ–π –ø—É—Ç—å
        """
        self.logger.info(f"üìÅ –§–∞–π–ª {idfl} –ø–µ—Ä–µ–º–µ—â–µ–Ω: {source_path} ‚Üí {target_path}")
    
    def log_file_error(self, idfl: str, error: Exception) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.
        
        Args:
            idfl: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        """
        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {idfl}: {error}")
    
    def log_database_error(self, operation: str, error: Exception) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            operation: –û–ø–µ—Ä–∞—Ü–∏—è, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
        """
        self.logger.error(f"üóÑÔ∏è –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ {operation}: {error}")
    
    def log_progress(self, current: int, total: int, percentage: float = None) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        
        Args:
            current: –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            total: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            percentage: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if percentage is None:
            percentage = (current / total) * 100 if total > 0 else 0
        
        self.logger.info(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} ({percentage:.1f}%)")
    
    def log_config_loaded(self, config_path: str) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        self.logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
    
    def log_database_connected(self, database: str, host: str, port: int) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            database: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            host: –•–æ—Å—Ç –ë–î
            port: –ü–æ—Ä—Ç –ë–î
        """
        self.logger.info(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {database}@{host}:{port}")
    
    def log_database_disconnected(self) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        self.logger.info("üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    def log_file_operation(self, operation: str, file_path: Path, success: bool = True) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ñ–∞–π–ª–æ–º.
        
        Args:
            operation: –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (read, write, move, delete)
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            success: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        status = "‚úÖ" if success else "‚ùå"
        self.logger.info(f"{status} {operation.upper()}: {file_path}")
    
    def log_system_info(self, info: str) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        
        Args:
            info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        self.logger.info(f"‚ÑπÔ∏è {info}")
    
    def log_warning(self, message: str) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        """
        self.logger.warning(f"‚ö†Ô∏è {message}")
    
    def log_critical_error(self, message: str, error: Exception = None) -> None:
        """
        –õ–æ–≥–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        if error:
            self.logger.critical(f"üí• {message}: {error}")
        else:
            self.logger.critical(f"üí• {message}")


def setup_logger(config: LoggingConfig) -> logging.Logger:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞.
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        logging.Logger: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    migrator_logger = FileMigratorLogger(config)
    return migrator_logger.get_logger()


def get_logger(name: str = 'file_migrator') -> logging.Logger:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –ø–æ –∏–º–µ–Ω–∏.
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        
    Returns:
        logging.Logger: –õ–æ–≥–≥–µ—Ä
    """
    return logging.getLogger(name)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    try:
        from .config_loader import load_config
    except ImportError:
        from config_loader import load_config
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = setup_logger(config.logging)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.debug("üîç –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        logger.info("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        logger.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        logger.error("‚ùå –û—à–∏–±–∫–∞")
        logger.critical("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        migrator_logger = FileMigratorLogger(config.logging)
        migrator_logger.log_migration_start(1000, 100)
        migrator_logger.log_file_moved("test001", Path("old/path"), Path("new/path"))
        migrator_logger.log_progress(50, 100)
        migrator_logger.log_migration_end(100, 95, 5)
        
        print("‚úÖ –õ–æ–≥–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–µ—Ä–∞: {e}")
