"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤,
–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º.
"""

import argparse
import sys
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional

try:
    from .config_loader import load_config
    from .logger import FileMigratorLogger, setup_logger
    from .migrator import Migrator, create_migrator, MigrationError
    from .db import Database
    from .file_ops import FileOps
except ImportError:
    from config_loader import load_config
    from logger import FileMigratorLogger, setup_logger
    from migrator import Migrator, create_migrator, MigrationError
    from db import Database
    from file_ops import FileOps


class FileMigratorCLI:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ CLI."""
    
    def __init__(self):
        self.config = None
        self.logger = None
        self.migrator = None
    
    def setup(self, config_path: str = "config/settings.ini") -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç CLI —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π.
        
        Args:
            config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config = load_config(config_path)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
            self.logger = FileMigratorLogger(self.config.logging)
            
            # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
            self.migrator = create_migrator(self.config, self.logger)
            
            self.logger.log_system_info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {config_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def cmd_migrate(self, args) -> int:
        """
        –ö–æ–º–∞–Ω–¥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            int: –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
        """
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            initial_status = self.migrator.get_migration_status()
            total_files = initial_status['database']['unmoved_files']
            
            if total_files == 0:
                print("‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
                return 0
            
            print(f"üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ {total_files} —Ñ–∞–π–ª–æ–≤")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            if args.max_files:
                stats = self.migrator.migrate_all(max_files=args.max_files)
            else:
                stats = self.migrator.migrate_all()
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.processed_files}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {stats.successful_files}")
            print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {stats.failed_files}")
            print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats.get_success_rate():.1f}%")
            print(f"   ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats.get_duration():.2f} —Å–µ–∫")
            
            if stats.failed_files > 0:
                print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {stats.failed_files} –æ—à–∏–±–æ–∫:")
                for error in stats.errors[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫
                    print(f"   ‚Ä¢ {error['file_id']}: {error['error']}")
                if len(stats.errors) > 10:
                    print(f"   ... –∏ –µ—â–µ {len(stats.errors) - 10} –æ—à–∏–±–æ–∫")
            
            return 0 if stats.failed_files == 0 else 1
            
        except MigrationError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return 1
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()
    
    def cmd_migrate_batch(self, args) -> int:
        """
        –ö–æ–º–∞–Ω–¥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞.
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            int: –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
        """
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            batch_size = args.batch_size or self.config.migrator.batch_size
            print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞—Ç—á–∞ —Ä–∞–∑–º–µ—Ä–æ–º {batch_size}")
            
            processed, successful, failed = self.migrator.migrate_batch(batch_size)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á–∞:")
            print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful}")
            print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {failed}")
            
            if processed == 0:
                print("‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
            
            return 0 if failed == 0 else 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞—Ç—á–∞: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()
    
    def cmd_migrate_date_range(self, args) -> int:
        """
        –ö–æ–º–∞–Ω–¥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç.
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            int: –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
        """
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
            start_date = datetime.strptime(args.start_date, "%Y-%m-%d")
            end_date = datetime.strptime(args.end_date, "%Y-%m-%d")
            
            if start_date > end_date:
                print("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π")
                return 1
            
            print(f"üìÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_date.date()} - {end_date.date()}")
            
            stats = self.migrator.migrate_by_date_range(start_date, end_date)
            
            print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.processed_files}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {stats.successful_files}")
            print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {stats.failed_files}")
            print(f"   ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats.get_duration():.2f} —Å–µ–∫")
            
            return 0 if stats.failed_files == 0 else 1
            
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
            return 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()
    
    def cmd_status(self, args) -> int:
        """
        –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏.
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            int: –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
        """
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            status = self.migrator.get_migration_status()
            
            print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤")
            print("=" * 50)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î
            db_stats = status['database']
            print(f"\nüóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {db_stats.get('total_files', 0)}")
            print(f"   ‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {db_stats.get('moved_files', 0)}")
            print(f"   ‚Ä¢ –ù–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {db_stats.get('unmoved_files', 0)}")
            
            if db_stats.get('earliest_file_date'):
                print(f"   ‚Ä¢ –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª: {db_stats['earliest_file_date']}")
            if db_stats.get('latest_file_date'):
                print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {db_stats['latest_file_date']}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            fs_stats = status['filesystem']
            print(f"\nüìÅ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:")
            print(f"   ‚Ä¢ –ù–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {fs_stats.get('unmoved_files_count', 0)}")
            print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö: {fs_stats.get('unmoved_files_size', 0):,} –±–∞–π—Ç")
            print(f"   ‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {fs_stats.get('moved_files_count', 0)}")
            print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö: {fs_stats.get('moved_files_size', 0):,} –±–∞–π—Ç")
            print(f"   ‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ –¥–∞—Ç–∞–º: {fs_stats.get('date_directories_count', 0)}")
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏
            total_files = db_stats.get('total_files', 0)
            moved_files = db_stats.get('moved_files', 0)
            if total_files > 0:
                progress = (moved_files / total_files) * 100
                print(f"\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏:")
                print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {progress:.1f}%")
                print(f"   ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {total_files - moved_files} —Ñ–∞–π–ª–æ–≤")
            
            # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            print(f"\n‚è∞ –í—Ä–µ–º—è: {status['timestamp']}")
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()
    
    def cmd_verify(self, args) -> int:
        """
        –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏.
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            int: –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
        """
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            sample_size = args.sample_size or 100
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä–∫–µ {sample_size} —Ñ–∞–π–ª–æ–≤...")
            
            verification_result = self.migrator.verify_migration(sample_size)
            
            print(f"\nüìã –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ:")
            print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {verification_result['total_checked']}")
            print(f"   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {verification_result['verified']}")
            print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {verification_result['errors']}")
            
            if verification_result['errors'] > 0:
                print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
                for detail in verification_result['details']:
                    print(f"   ‚Ä¢ {detail}")
                return 1
            else:
                print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
                return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()
    
    def cmd_cleanup(self, args) -> int:
        """
        –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            int: –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
        """
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            print("üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            # –û—á–∏—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏
            removed_dirs = self.migrator.file_ops.cleanup_empty_directories()
            print(f"   ‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {removed_dirs}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
            stats = self.migrator.file_ops.get_storage_statistics()
            print(f"   ‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ –¥–∞—Ç–∞–º: {stats.get('date_directories_count', 0)}")
            
            print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()
    
    def cmd_test_connection(self, args) -> int:
        """
        –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            int: –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
            db = Database(self.config.database, self.logger)
            
            print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            if db.test_connection():
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ë–î
                stats = db.get_migration_statistics()
                print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î:")
                print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats.get('total_files', 0)}")
                print(f"   ‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {stats.get('moved_files', 0)}")
                print(f"   ‚Ä¢ –ù–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {stats.get('unmoved_files', 0)}")
                
                return 0
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
                return 1
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return 1
        finally:
            if 'db' in locals():
                db.close()
    
    def cmd_list_files(self, args) -> int:
        """
        –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.
        
        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            
        Returns:
            int: –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞ (0 - —É—Å–ø–µ—Ö, 1 - –æ—à–∏–±–∫–∞)
        """
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            limit = args.limit or 20
            
            if args.type == 'unmoved':
                print(f"üìÅ –°–ø–∏—Å–æ–∫ –Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø–µ—Ä–≤—ã–µ {limit}):")
                files = self.migrator.file_ops.list_unmoved_files()
                for i, file_path in enumerate(files[:limit]):
                    size = file_path.stat().st_size
                    print(f"   {i+1:2d}. {file_path.name} ({size:,} –±–∞–π—Ç)")
                
                if len(files) > limit:
                    print(f"   ... –∏ –µ—â–µ {len(files) - limit} —Ñ–∞–π–ª–æ–≤")
                    
            elif args.type == 'moved':
                print(f"üìÅ –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø–µ—Ä–≤—ã–µ {limit}):")
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ë–î
                with Database(self.config.database, self.logger) as db:
                    moved_files = db.get_files_to_move(limit * 2)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    moved_files = [f for f in moved_files if f['ismooved']]
                    
                    for i, file_info in enumerate(moved_files[:limit]):
                        print(f"   {i+1:2d}. {file_info['IDFL']} - {file_info['filename']} ({file_info['dt']})")
                    
                    if len(moved_files) > limit:
                        print(f"   ... –∏ –µ—â–µ {len(moved_files) - limit} —Ñ–∞–π–ª–æ–≤")
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()


def create_parser() -> argparse.ArgumentParser:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
    
    Returns:
        argparse.ArgumentParser: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    """
    parser = argparse.ArgumentParser(
        description="–£—Ç–∏–ª–∏—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ –¥–∞—Ç–∞–º",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ú–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  python main.py migrate

  # –ú–∏–≥—Ä–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  python main.py migrate --max-files 1000

  # –ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞
  python main.py migrate-batch --batch-size 50

  # –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
  python main.py migrate-date-range --start-date 2024-01-01 --end-date 2024-01-31

  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
  python main.py status

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
  python main.py verify --sample-size 200

  # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  python main.py cleanup

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
  python main.py test-connection

  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
  python main.py list-files --type unmoved --limit 10
        """
    )
    
    # –û–±—â–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    parser.add_argument(
        '--config',
        default='config/settings.ini',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config/settings.ini)'
    )
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    # –ü–æ–¥–∫–æ–º–∞–Ω–¥—ã
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ migrate
    migrate_parser = subparsers.add_parser('migrate', help='–ú–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤')
    migrate_parser.add_argument(
        '--max-files',
        type=int,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ migrate-batch
    batch_parser = subparsers.add_parser('migrate-batch', help='–ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞')
    batch_parser.add_argument(
        '--batch-size',
        type=int,
        help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ migrate-date-range
    date_range_parser = subparsers.add_parser('migrate-date-range', help='–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç')
    date_range_parser.add_argument(
        '--start-date',
        required=True,
        help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)'
    )
    date_range_parser.add_argument(
        '--end-date',
        required=True,
        help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD)'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ status
    subparsers.add_parser('status', help='–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ verify
    verify_parser = subparsers.add_parser('verify', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏')
    verify_parser.add_argument(
        '--sample-size',
        type=int,
        default=100,
        help='–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ cleanup
    subparsers.add_parser('cleanup', help='–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤')
    
    # –ö–æ–º–∞–Ω–¥–∞ test-connection
    subparsers.add_parser('test-connection', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î')
    
    # –ö–æ–º–∞–Ω–¥–∞ list-files
    list_parser = subparsers.add_parser('list-files', help='–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤')
    list_parser.add_argument(
        '--type',
        choices=['unmoved', 'moved'],
        required=True,
        help='–¢–∏–ø —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'
    )
    list_parser.add_argument(
        '--limit',
        type=int,
        default=20,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 20)'
    )
    
    return parser


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = create_parser()
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —É–∫–∞–∑–∞–Ω–∞
    if not args.command:
        parser.print_help()
        return 1
    
    # –°–æ–∑–¥–∞–µ–º CLI
    cli = FileMigratorCLI()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CLI
    if not cli.setup(args.config):
        return 1
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    try:
        if args.command == 'migrate':
            return cli.cmd_migrate(args)
        elif args.command == 'migrate-batch':
            return cli.cmd_migrate_batch(args)
        elif args.command == 'migrate-date-range':
            return cli.cmd_migrate_date_range(args)
        elif args.command == 'status':
            return cli.cmd_status(args)
        elif args.command == 'verify':
            return cli.cmd_verify(args)
        elif args.command == 'cleanup':
            return cli.cmd_cleanup(args)
        elif args.command == 'test-connection':
            return cli.cmd_test_connection(args)
        elif args.command == 'list-files':
            return cli.cmd_list_files(args)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
