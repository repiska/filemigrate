#!/usr/bin/env python3
"""
–ú–æ–Ω–æ–ª–∏—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —É—Ç–∏–ª–∏—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤.

–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è.
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import argparse
import configparser
import hashlib
import logging
import logging.handlers
import mysql.connector
import os
import shutil
import sys
import time
from dataclasses import dataclass
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict, Optional, Tuple, Union
from mysql.connector import Error, pooling


# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

@dataclass
class DatabaseConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    driver: str
    host: str
    port: int
    database: str
    username: str
    password: str
    trusted_connection: bool = False


@dataclass
class PathsConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º."""
    file_path: Path
    new_file_path: Path


@dataclass
class MigratorConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏."""
    batch_size: int
    max_retries: int
    retry_delay: float


@dataclass
class LoggingConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    level: str
    log_file: Path
    max_log_size: int
    backup_count: int


@dataclass
class Config:
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    database: DatabaseConfig
    paths: PathsConfig
    migrator: MigratorConfig
    logging: LoggingConfig


# ==================== –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø ====================

class MigrationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–∏."""
    pass


class DatabaseConnectionError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""
    pass


class DatabaseQueryError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤."""
    pass


class FileOperationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏."""
    pass


class FileNotFoundError(FileOperationError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    pass


# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

class ColoredFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏."""
    
    COLORS = {
        'DEBUG': '\033[36m',      # Cyan
        'INFO': '\033[32m',       # Green
        'WARNING': '\033[33m',    # Yellow
        'ERROR': '\033[31m',      # Red
        'CRITICAL': '\033[35m',   # Magenta
        'RESET': '\033[0m'        # Reset
    }
    
    def format(self, record):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –ª–æ–≥–∞ —Å —Ü–≤–µ—Ç–æ–º."""
        if record.levelname in self.COLORS:
            record.levelname = f"{self.COLORS[record.levelname]}{record.levelname}{self.COLORS['RESET']}"
        return super().format(record)


class FileMigratorLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è File Migrator."""
    
    def __init__(self, config: LoggingConfig):
        self.config = config
        self.logger: Optional[logging.Logger] = None
        self._setup_logger()
    
    def _setup_logger(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å —Ñ–∞–π–ª–æ–≤—ã–º –∏ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º."""
        self.logger = logging.getLogger('file_migrator')
        self.logger.setLevel(getattr(logging, self.config.level.upper()))
        self.logger.handlers.clear()
        
        formatter = logging.Formatter(
            fmt='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        colored_formatter = ColoredFormatter(
            fmt='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        log_file_path = Path(self.config.log_file)
        log_file_path.parent.mkdir(parents=True, exist_ok=True)
        
        file_handler = logging.handlers.RotatingFileHandler(
            filename=log_file_path,
            maxBytes=self.config.max_log_size * 1024 * 1024,
            backupCount=self.config.backup_count,
            encoding='utf-8'
        )
        file_handler.setFormatter(formatter)
        file_handler.setLevel(getattr(logging, self.config.level.upper()))
        
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setFormatter(colored_formatter)
        console_handler.setLevel(getattr(logging, self.config.level.upper()))
        
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)
        self.logger.propagate = False
    
    def get_logger(self) -> logging.Logger:
        if self.logger is None:
            raise RuntimeError("–õ–æ–≥–≥–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return self.logger
    
    # –ú–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    def log_migration_start(self, total_files: int, batch_size: int) -> None:
        self.logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤")
        self.logger.info(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        self.logger.info(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        self.logger.info(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    def log_migration_end(self, processed_files: int, successful_files: int, failed_files: int) -> None:
        self.logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self.logger.info(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_files}")
        self.logger.info(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful_files}")
        self.logger.info(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {failed_files}")
        self.logger.info(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    def log_batch_start(self, batch_number: int, batch_size: int) -> None:
        self.logger.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ #{batch_number} (—Ä–∞–∑–º–µ—Ä: {batch_size})")
    
    def log_batch_end(self, batch_number: int, processed: int, successful: int, failed: int) -> None:
        self.logger.info(f"‚úÖ –ë–∞—Ç—á #{batch_number} –∑–∞–≤–µ—Ä—à–µ–Ω: {successful}/{processed} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
    
    def log_file_moved(self, idfl: str, source_path: Path, target_path: Path) -> None:
        self.logger.info(f"üìÅ –§–∞–π–ª {idfl} –ø–µ—Ä–µ–º–µ—â–µ–Ω: {source_path} ‚Üí {target_path}")
    
    def log_file_error(self, idfl: str, error: Exception) -> None:
        self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {idfl}: {error}")
    
    def log_database_error(self, operation: str, error: Exception) -> None:
        self.logger.error(f"üóÑÔ∏è –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ {operation}: {error}")
    
    def log_progress(self, current: int, total: int, percentage: float = None) -> None:
        if percentage is None:
            percentage = (current / total) * 100 if total > 0 else 0
        self.logger.info(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {current}/{total} ({percentage:.1f}%)")
    
    def log_config_loaded(self, config_path: str) -> None:
        self.logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
    
    def log_database_connected(self, database: str, host: str, port: int) -> None:
        self.logger.info(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {database}@{host}:{port}")
    
    def log_database_disconnected(self) -> None:
        self.logger.info("üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    def log_file_operation(self, operation: str, file_path: Path, success: bool = True) -> None:
        status = "‚úÖ" if success else "‚ùå"
        self.logger.info(f"{status} {operation.upper()}: {file_path}")
    
    def log_system_info(self, info: str) -> None:
        self.logger.info(f"‚ÑπÔ∏è {info}")
    
    def log_warning(self, message: str) -> None:
        self.logger.warning(f"‚ö†Ô∏è {message}")
    
    def log_critical_error(self, message: str, error: Exception = None) -> None:
        if error:
            self.logger.critical(f"üí• {message}: {error}")
        else:
            self.logger.critical(f"üí• {message}")


# ==================== –ó–ê–ì–†–£–ó–ß–ò–ö –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ====================

class ConfigLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    
    def __init__(self, config_path: str = "config/settings.ini"):
        self.config_path = Path(config_path)
        self._config: Optional[Config] = None
    
    def load_config(self) -> Config:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞."""
        if not self.config_path.exists():
            raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
        
        config_parser = configparser.ConfigParser()
        config_parser.read(self.config_path, encoding='utf-8')
        
        try:
            db_config = self._load_database_config(config_parser)
            paths_config = self._load_paths_config(config_parser)
            migrator_config = self._load_migrator_config(config_parser)
            logging_config = self._load_logging_config(config_parser)
            
            self._config = Config(
                database=db_config,
                paths=paths_config,
                migrator=migrator_config,
                logging=logging_config
            )
            
            self._validate_config()
            return self._config
            
        except Exception as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def _load_database_config(self, parser: configparser.ConfigParser) -> DatabaseConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        section = 'database'
        if not parser.has_section(section):
            raise ValueError(f"–°–µ–∫—Ü–∏—è '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        driver = parser.get(section, 'driver', fallback='mysql')
        
        if driver == 'mysql':
            return DatabaseConfig(
                driver=driver,
                host=parser.get(section, 'host'),
                port=parser.getint(section, 'port', fallback=3306),
                database=parser.get(section, 'database'),
                username=parser.get(section, 'username'),
                password=parser.get(section, 'password')
            )
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –¥—Ä–∞–π–≤–µ—Ä –ë–î: {driver}")
    
    def _load_paths_config(self, parser: configparser.ConfigParser) -> PathsConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—É—Ç–µ–π."""
        section = 'paths'
        if not parser.has_section(section):
            raise ValueError(f"–°–µ–∫—Ü–∏—è '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        return PathsConfig(
            file_path=Path(parser.get(section, 'file_path')),
            new_file_path=Path(parser.get(section, 'new_file_path'))
        )
    
    def _load_migrator_config(self, parser: configparser.ConfigParser) -> MigratorConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∏–≥—Ä–∞—Ç–æ—Ä–∞."""
        section = 'migrator'
        if not parser.has_section(section):
            raise ValueError(f"–°–µ–∫—Ü–∏—è '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        return MigratorConfig(
            batch_size=parser.getint(section, 'batch_size', fallback=1000),
            max_retries=parser.getint(section, 'max_retries', fallback=3),
            retry_delay=parser.getfloat(section, 'retry_delay', fallback=1.0)
        )
    
    def _load_logging_config(self, parser: configparser.ConfigParser) -> LoggingConfig:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
        section = 'logging'
        if not parser.has_section(section):
            raise ValueError(f"–°–µ–∫—Ü–∏—è '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        return LoggingConfig(
            level=parser.get(section, 'level', fallback='INFO'),
            log_file=Path(parser.get(section, 'log_file', fallback='logs/migrator.log')),
            max_log_size=parser.getint(section, 'max_log_size', fallback=10),
            backup_count=parser.getint(section, 'backup_count', fallback=5)
        )
    
    def _validate_config(self) -> None:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        if not self._config:
            raise ValueError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        if not self._config.paths.file_path.exists():
            raise ValueError(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª–∞–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self._config.paths.file_path}")
        
        if self._config.migrator.batch_size <= 0:
            raise ValueError("–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
        valid_levels = ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL']
        if self._config.logging.level.upper() not in valid_levels:
            raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {self._config.logging.level}")


def load_config(config_path: str = "config/settings.ini") -> Config:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    loader = ConfigLoader(config_path)
    return loader.load_config()


# ==================== –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ====================

class Database:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö MySQL."""
    
    def __init__(self, config: DatabaseConfig, logger: FileMigratorLogger):
        self.config = config
        self.logger = logger
        self.connection_pool: Optional[pooling.MySQLConnectionPool] = None
        self._setup_connection_pool()
    
    def _setup_connection_pool(self) -> None:
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
        try:
            pool_config = {
                'pool_name': 'file_migrator_pool',
                'pool_size': 5,
                'pool_reset_session': True,
                'host': self.config.host,
                'port': self.config.port,
                'database': self.config.database,
                'user': self.config.username,
                'password': self.config.password,
                'autocommit': True,
                'charset': 'utf8mb4',
                'collation': 'utf8mb4_unicode_ci',
                'raise_on_warnings': True,
                'use_unicode': True
            }
            
            self.connection_pool = pooling.MySQLConnectionPool(**pool_config)
            self.logger.log_database_connected(
                self.config.database, 
                self.config.host, 
                self.config.port
            )
            
        except Error as e:
            self.logger.log_database_error("pool_setup", e)
            raise DatabaseConnectionError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
    
    def _get_connection(self) -> mysql.connector.connection.MySQLConnection:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞."""
        try:
            if self.connection_pool is None:
                raise DatabaseConnectionError("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            connection = self.connection_pool.get_connection()
            return connection
            
        except Error as e:
            self.logger.log_database_error("get_connection", e)
            raise DatabaseConnectionError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
    
    def _execute_query(self, query: str, params: Tuple = None, fetch: bool = False) -> Optional[List[Dict]]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç SQL –∑–∞–ø—Ä–æ—Å."""
        connection = None
        cursor = None
        
        try:
            connection = self._get_connection()
            cursor = connection.cursor(dictionary=True)
            
            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)
            
            if fetch:
                result = cursor.fetchall()
                return result
            else:
                connection.commit()
                return None
                
        except Error as e:
            if connection:
                connection.rollback()
            self.logger.log_database_error("execute_query", e)
            raise DatabaseQueryError(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            
        finally:
            if cursor:
                cursor.close()
            if connection:
                connection.close()
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
        try:
            connection = self._get_connection()
            cursor = connection.cursor()
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            cursor.close()
            connection.close()
            
            self.logger.log_system_info("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —É—Å–ø–µ—à–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.log_database_error("test_connection", e)
            return False
    
    def get_files_to_move(self, batch_size: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏."""
        query = """
        SELECT IDFL, dt, filename, ismooved, dtmoove, created_at, updated_at
        FROM repl_AV_ATF 
        WHERE ismooved = 0 
        ORDER BY dt ASC, IDFL ASC
        LIMIT %s
        """
        
        try:
            result = self._execute_query(query, (batch_size,), fetch=True)
            self.logger.log_system_info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
            return result
            
        except DatabaseQueryError as e:
            self.logger.log_database_error("get_files_to_move", e)
            raise
    
    def mark_file_moved(self, idfl: str, dtmoove: datetime = None) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–π."""
        if dtmoove is None:
            dtmoove = datetime.now()
        
        query = """
        UPDATE repl_AV_ATF 
        SET ismooved = 1, dtmoove = %s, updated_at = NOW()
        WHERE IDFL = %s AND ismooved = 0
        """
        
        try:
            self._execute_query(query, (dtmoove, idfl))
            self.logger.log_system_info(f"–§–∞–π–ª {idfl} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–π")
            return True
            
        except DatabaseQueryError as e:
            self.logger.log_database_error("mark_file_moved", e)
            return False
    
    def get_migration_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏."""
        query = """
        SELECT 
            COUNT(*) as total_files,
            SUM(CASE WHEN ismooved = 1 THEN 1 ELSE 0 END) as moved_files,
            SUM(CASE WHEN ismooved = 0 THEN 1 ELSE 0 END) as unmoved_files,
            MIN(dt) as earliest_file_date,
            MAX(dt) as latest_file_date
        FROM repl_AV_ATF
        """
        
        try:
            result = self._execute_query(query, fetch=True)
            if result:
                stats = result[0]
                self.logger.log_system_info("–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
                return stats
            else:
                return {}
                
        except DatabaseQueryError as e:
            self.logger.log_database_error("get_migration_statistics", e)
            raise
    
    def get_files_by_date_range(self, start_date: datetime, end_date: datetime) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç."""
        query = """
        SELECT IDFL, dt, filename, ismooved, dtmoove, created_at, updated_at
        FROM repl_AV_ATF 
        WHERE dt BETWEEN %s AND %s
        ORDER BY dt ASC, IDFL ASC
        """
        
        try:
            result = self._execute_query(query, (start_date, end_date), fetch=True)
            self.logger.log_system_info(f"–ù–∞–π–¥–µ–Ω–æ {len(result)} —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {start_date} - {end_date}")
            return result
            
        except DatabaseQueryError as e:
            self.logger.log_database_error("get_files_by_date_range", e)
            raise
    
    def close(self) -> None:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        try:
            if self.connection_pool:
                self.connection_pool = None
            self.logger.log_database_disconnected()
        except Exception as e:
            self.logger.log_database_error("close", e)
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()


# ==================== –û–ü–ï–†–ê–¶–ò–ò –° –§–ê–ô–õ–û–í–û–ô –°–ò–°–¢–ï–ú–û–ô ====================

class FileOps:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π."""
    
    def __init__(self, paths_config: PathsConfig, logger: FileMigratorLogger):
        self.paths_config = paths_config
        self.logger = logger
        self.base_path = Path(paths_config.file_path)
        self.new_base_path = Path(paths_config.new_file_path)
        self._ensure_directories_exist()
    
    def _ensure_directories_exist(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        try:
            self.base_path.mkdir(parents=True, exist_ok=True)
            self.new_base_path.mkdir(parents=True, exist_ok=True)
            self.logger.log_system_info(f"–ö–∞—Ç–∞–ª–æ–≥–∏ —Å–æ–∑–¥–∞–Ω—ã: {self.base_path}, {self.new_base_path}")
        except Exception as e:
            self.logger.log_database_error("create_directories", e)
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {e}")
    
    def _get_date_directory(self, dt: datetime) -> Path:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É –ø–æ –¥–∞—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYYMMDD."""
        date_str = dt.strftime("%Y%m%d")
        return self.new_base_path / date_str
    
    def _ensure_date_directory_exists(self, dt: datetime) -> Path:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
        date_dir = self._get_date_directory(dt)
        try:
            date_dir.mkdir(parents=True, exist_ok=True)
            return date_dir
        except Exception as e:
            self.logger.log_database_error("create_date_directory", e)
            raise FileOperationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ –¥–∞—Ç–µ: {e}")
    
    def move_file(self, idfl: str, dt: datetime) -> Path:
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ –¥–∞—Ç–µ."""
        source_path = self.base_path / idfl
        
        if not source_path.exists():
            error_msg = f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source_path}"
            self.logger.log_file_error(idfl, FileNotFoundError(error_msg))
            raise FileNotFoundError(error_msg)
        
        try:
            target_dir = self._ensure_date_directory_exists(dt)
            target_path = target_dir / idfl
            
            if target_path.exists():
                target_path = self._get_unique_filename(target_dir, idfl)
            
            shutil.move(str(source_path), str(target_path))
            
            self.logger.log_file_moved(idfl, source_path, target_path)
            self.logger.log_file_operation("move", target_path, True)
            
            return target_path
            
        except Exception as e:
            self.logger.log_file_error(idfl, e)
            raise FileOperationError(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {idfl}: {e}")
    
    def _get_unique_filename(self, directory: Path, filename: str) -> Path:
        """–ü–æ–ª—É—á–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."""
        base_path = directory / filename
        if not base_path.exists():
            return base_path
        
        name_parts = filename.rsplit('.', 1)
        if len(name_parts) == 2:
            base_name, extension = name_parts
            extension = '.' + extension
        else:
            base_name = filename
            extension = ''
        
        counter = 1
        while True:
            new_name = f"{base_name}_{counter}{extension}"
            new_path = directory / new_name
            if not new_path.exists():
                return new_path
            counter += 1
    
    def file_exists(self, idfl: str, ismooved: bool, dt: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ —Å—Ç–∞—Ä–æ–π –∏–ª–∏ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ."""
        try:
            if ismooved:
                date_dir = self._get_date_directory(dt)
                file_path = date_dir / idfl
            else:
                file_path = self.base_path / idfl
            
            exists = file_path.exists()
            self.logger.log_system_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ {idfl}: {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
            return exists
            
        except Exception as e:
            self.logger.log_file_error(idfl, e)
            return False
    
    def get_file_size(self, idfl: str, ismooved: bool, dt: datetime) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö."""
        try:
            if ismooved:
                date_dir = self._get_date_directory(dt)
                file_path = date_dir / idfl
            else:
                file_path = self.base_path / idfl
            
            if file_path.exists():
                size = file_path.stat().st_size
                self.logger.log_system_info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {idfl}: {size} –±–∞–π—Ç")
                return size
            else:
                return None
                
        except Exception as e:
            self.logger.log_file_error(idfl, e)
            return None
    
    def get_file_hash(self, idfl: str, ismooved: bool, dt: datetime, algorithm: str = 'md5') -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏."""
        try:
            if ismooved:
                date_dir = self._get_date_directory(dt)
                file_path = date_dir / idfl
            else:
                file_path = self.base_path / idfl
            
            if not file_path.exists():
                return None
            
            if algorithm == 'md5':
                hasher = hashlib.md5()
            elif algorithm == 'sha1':
                hasher = hashlib.sha1()
            elif algorithm == 'sha256':
                hasher = hashlib.sha256()
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {algorithm}")
            
            with open(file_path, 'rb') as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hasher.update(chunk)
            
            file_hash = hasher.hexdigest()
            self.logger.log_system_info(f"–•–µ—à —Ñ–∞–π–ª–∞ {idfl} ({algorithm}): {file_hash}")
            return file_hash
            
        except Exception as e:
            self.logger.log_file_error(idfl, e)
            return None
    
    def list_unmoved_files(self) -> List[Path]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–æ–≤–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ (–Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö)."""
        try:
            if not self.base_path.exists():
                return []
            
            files = [f for f in self.base_path.iterdir() if f.is_file()]
            self.logger.log_system_info(f"–ù–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(files)}")
            return files
            
        except Exception as e:
            self.logger.log_database_error("list_unmoved_files", e)
            return []
    
    def cleanup_empty_directories(self) -> int:
        """–£–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ."""
        try:
            removed_count = 0
            
            if not self.new_base_path.exists():
                return 0
            
            for date_dir in self.new_base_path.iterdir():
                if date_dir.is_dir():
                    try:
                        if not any(date_dir.iterdir()):
                            date_dir.rmdir()
                            removed_count += 1
                            self.logger.log_system_info(f"–£–¥–∞–ª–µ–Ω –ø—É—Å—Ç–æ–π –∫–∞—Ç–∞–ª–æ–≥: {date_dir}")
                    except OSError:
                        pass
            
            if removed_count > 0:
                self.logger.log_system_info(f"–£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {removed_count}")
            
            return removed_count
            
        except Exception as e:
            self.logger.log_database_error("cleanup_empty_directories", e)
            return 0
    
    def get_storage_statistics(self) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞."""
        try:
            stats = {
                'base_path': str(self.base_path),
                'new_base_path': str(self.new_base_path),
                'unmoved_files_count': 0,
                'unmoved_files_size': 0,
                'date_directories_count': 0,
                'moved_files_count': 0,
                'moved_files_size': 0
            }
            
            if self.base_path.exists():
                unmoved_files = self.list_unmoved_files()
                stats['unmoved_files_count'] = len(unmoved_files)
                stats['unmoved_files_size'] = sum(f.stat().st_size for f in unmoved_files)
            
            if self.new_base_path.exists():
                date_dirs = [d for d in self.new_base_path.iterdir() if d.is_dir()]
                stats['date_directories_count'] = len(date_dirs)
                
                total_moved_files = 0
                total_moved_size = 0
                
                for date_dir in date_dirs:
                    files = [f for f in date_dir.iterdir() if f.is_file()]
                    total_moved_files += len(files)
                    total_moved_size += sum(f.stat().st_size for f in files)
                
                stats['moved_files_count'] = total_moved_files
                stats['moved_files_size'] = total_moved_size
            
            self.logger.log_system_info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {stats}")
            return stats
            
        except Exception as e:
            self.logger.log_database_error("get_storage_statistics", e)
            return {}


# ==================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò ====================

class MigrationStats:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏."""
    
    def __init__(self):
        self.total_files = 0
        self.processed_files = 0
        self.successful_files = 0
        self.failed_files = 0
        self.skipped_files = 0
        self.start_time = None
        self.end_time = None
        self.batch_count = 0
        self.errors = []
    
    def add_error(self, file_id: str, error: Exception):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤ —Å–ø–∏—Å–æ–∫."""
        self.errors.append({
            'file_id': file_id,
            'error': str(error),
            'timestamp': datetime.now()
        })
    
    def get_duration(self) -> Optional[float]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        if self.start_time and self.end_time:
            return (self.end_time - self.start_time).total_seconds()
        return None
    
    def get_success_rate(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π."""
        if self.processed_files == 0:
            return 0.0
        return (self.successful_files / self.processed_files) * 100
    
    def to_dict(self) -> Dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            'total_files': self.total_files,
            'processed_files': self.processed_files,
            'successful_files': self.successful_files,
            'failed_files': self.failed_files,
            'skipped_files': self.skipped_files,
            'batch_count': self.batch_count,
            'start_time': self.start_time.isoformat() if self.start_time else None,
            'end_time': self.end_time.isoformat() if self.end_time else None,
            'duration_seconds': self.get_duration(),
            'success_rate': self.get_success_rate(),
            'error_count': len(self.errors)
        }


# ==================== –ú–ò–ì–†–ê–¢–û–† ====================

class Migrator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤."""
    
    def __init__(self, config: Config, logger: FileMigratorLogger):
        self.config = config
        self.logger = logger
        self.db = Database(config.database, logger)
        self.file_ops = FileOps(config.paths, logger)
        self.stats = MigrationStats()
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∏–≥—Ä–∞—Ç–æ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–∞–±–æ—Ç–µ."""
        try:
            self.logger.log_system_info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–≥—Ä–∞—Ç–æ—Ä–∞")
            
            if not self.db.test_connection():
                self.logger.log_critical_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return False
            
            db_stats = self.db.get_migration_statistics()
            self.stats.total_files = db_stats.get('unmoved_files', 0)
            
            fs_stats = self.file_ops.get_storage_statistics()
            
            self.logger.log_system_info(f"–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –º–∏–≥—Ä–∞—Ü–∏–∏:")
            self.logger.log_system_info(f"  ‚Ä¢ –§–∞–π–ª–æ–≤ –≤ –ë–î: {db_stats.get('total_files', 0)}")
            self.logger.log_system_info(f"  ‚Ä¢ –ù–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö: {self.stats.total_files}")
            self.logger.log_system_info(f"  ‚Ä¢ –§–∞–π–ª–æ–≤ –≤ –§–°: {fs_stats.get('unmoved_files_count', 0)}")
            
            return True
            
        except Exception as e:
            self.logger.log_critical_error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∏–≥—Ä–∞—Ç–æ—Ä–∞", e)
            return False
    
    def migrate_batch(self, batch_size: Optional[int] = None) -> Tuple[int, int, int]:
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –±–∞—Ç—á —Ñ–∞–π–ª–æ–≤."""
        if batch_size is None:
            batch_size = self.config.migrator.batch_size
        
        self.stats.batch_count += 1
        batch_number = self.stats.batch_count
        
        self.logger.log_batch_start(batch_number, batch_size)
        
        try:
            files = self.db.get_files_to_move(batch_size)
            
            if not files:
                self.logger.log_system_info("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
                return 0, 0, 0
            
            processed = 0
            successful = 0
            failed = 0
            
            for file_info in files:
                try:
                    result = self._migrate_single_file(file_info)
                    if result:
                        successful += 1
                    else:
                        failed += 1
                    processed += 1
                    
                except Exception as e:
                    failed += 1
                    self.stats.add_error(file_info['IDFL'], e)
                    self.logger.log_file_error(file_info['IDFL'], e)
            
            self.stats.processed_files += processed
            self.stats.successful_files += successful
            self.stats.failed_files += failed
            
            self.logger.log_batch_end(batch_number, processed, successful, failed)
            
            return processed, successful, failed
            
        except Exception as e:
            self.logger.log_database_error("migrate_batch", e)
            raise MigrationError(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞—Ç—á–∞: {e}")
    
    def _migrate_single_file(self, file_info: Dict) -> bool:
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª."""
        idfl = file_info['IDFL']
        dt = file_info['dt']
        
        try:
            if not self.file_ops.file_exists(idfl, ismooved=False, dt=dt):
                self.logger.log_file_error(idfl, FileNotFoundError("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ"))
                return False
            
            old_hash = self.file_ops.get_file_hash(idfl, ismooved=False, dt=dt, algorithm="md5")
            
            old_path = self.file_ops.base_path / idfl
            new_path = self.file_ops.move_file(idfl, dt)
            
            new_hash = self.file_ops.get_file_hash(idfl, ismooved=True, dt=dt, algorithm="md5")
            
            if old_hash and new_hash and old_hash != new_hash:
                self.logger.log_file_error(idfl, ValueError("–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"))
                return False
            
            if not self.db.mark_file_moved(idfl, datetime.now()):
                self.logger.log_database_error("mark_file_moved", Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Ñ–∞–π–ª {idfl} –∫–∞–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã–π"))
                return False
            
            self.logger.log_file_moved(idfl, old_path, new_path)
            return True
            
        except Exception as e:
            self.logger.log_file_error(idfl, e)
            return False
    
    def migrate_all(self, max_files: Optional[int] = None) -> MigrationStats:
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã."""
        self.stats.start_time = datetime.now()
        
        try:
            if not self.initialize():
                raise MigrationError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
            
            self.logger.log_migration_start(
                total_files=self.stats.total_files,
                batch_size=self.config.migrator.batch_size
            )
            
            while True:
                if max_files and self.stats.processed_files >= max_files:
                    self.logger.log_system_info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤: {max_files}")
                    break
                
                batch_size = self.config.migrator.batch_size
                if max_files:
                    remaining = max_files - self.stats.processed_files
                    batch_size = min(batch_size, remaining)
                
                processed, successful, failed = self.migrate_batch(batch_size)
                
                if processed == 0:
                    self.logger.log_system_info("–í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                    break
                
                progress = (self.stats.processed_files / self.stats.total_files) * 100 if self.stats.total_files > 0 else 0
                self.logger.log_progress(self.stats.processed_files, self.stats.total_files, progress)
                
                if self.config.migrator.retry_delay > 0:
                    time.sleep(self.config.migrator.retry_delay)
            
            self.stats.end_time = datetime.now()
            
            self.logger.log_migration_end(
                processed_files=self.stats.processed_files,
                successful_files=self.stats.successful_files,
                failed_files=self.stats.failed_files
            )
            
            return self.stats
            
        except Exception as e:
            self.stats.end_time = datetime.now()
            self.logger.log_critical_error("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏", e)
            raise MigrationError(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    
    def migrate_by_date_range(self, start_date: datetime, end_date: datetime) -> MigrationStats:
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç."""
        self.stats.start_time = datetime.now()
        
        try:
            if not self.initialize():
                raise MigrationError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
            
            files = self.db.get_files_by_date_range(start_date, end_date)
            unmoved_files = [f for f in files if not f['ismooved']]
            
            self.stats.total_files = len(unmoved_files)
            
            self.logger.log_system_info(f"–ú–∏–≥—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {start_date.date()} - {end_date.date()}")
            self.logger.log_system_info(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}, –Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö: {len(unmoved_files)}")
            
            if not unmoved_files:
                self.logger.log_system_info("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
                self.stats.end_time = datetime.now()
                return self.stats
            
            for file_info in unmoved_files:
                try:
                    result = self._migrate_single_file(file_info)
                    if result:
                        self.stats.successful_files += 1
                    else:
                        self.stats.failed_files += 1
                    self.stats.processed_files += 1
                    
                except Exception as e:
                    self.stats.failed_files += 1
                    self.stats.add_error(file_info['IDFL'], e)
                    self.logger.log_file_error(file_info['IDFL'], e)
            
            self.stats.end_time = datetime.now()
            
            self.logger.log_migration_end(
                processed_files=self.stats.processed_files,
                successful_files=self.stats.successful_files,
                failed_files=self.stats.failed_files
            )
            
            return self.stats
            
        except Exception as e:
            self.stats.end_time = datetime.now()
            self.logger.log_critical_error("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç", e)
            raise MigrationError(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç: {e}")
    
    def verify_migration(self, sample_size: int = 100) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä–∫–µ —Ñ–∞–π–ª–æ–≤."""
        try:
            self.logger.log_system_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä–∫–µ {sample_size} —Ñ–∞–π–ª–æ–≤")
            
            moved_files = self.db.get_files_to_move(sample_size)
            moved_files = [f for f in moved_files if f['ismooved']]
            
            if not moved_files:
                self.logger.log_system_info("–ù–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
                return {'verified': 0, 'errors': 0, 'total_checked': 0, 'details': []}
            
            verified = 0
            errors = 0
            details = []
            
            for file_info in moved_files[:sample_size]:
                idfl = file_info['IDFL']
                dt = file_info['dt']
                
                try:
                    if not self.file_ops.file_exists(idfl, ismooved=True, dt=dt):
                        errors += 1
                        details.append(f"–§–∞–π–ª {idfl} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
                        continue
                    
                    size = self.file_ops.get_file_size(idfl, ismooved=True, dt=dt)
                    if size is None or size == 0:
                        errors += 1
                        details.append(f"–§–∞–π–ª {idfl} –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä")
                        continue
                    
                    verified += 1
                    
                except Exception as e:
                    errors += 1
                    details.append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ {idfl}: {e}")
            
            result = {
                'verified': verified,
                'errors': errors,
                'total_checked': len(moved_files[:sample_size]),
                'details': details
            }
            
            self.logger.log_system_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {verified} –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö, {errors} –æ—à–∏–±–æ–∫")
            
            return result
            
        except Exception as e:
            self.logger.log_database_error("verify_migration", e)
            raise MigrationError(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    
    def get_migration_status(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏."""
        try:
            db_stats = self.db.get_migration_statistics()
            fs_stats = self.file_ops.get_storage_statistics()
            migrator_stats = self.stats.to_dict()
            
            status = {
                'database': db_stats,
                'filesystem': fs_stats,
                'migrator': migrator_stats,
                'timestamp': datetime.now().isoformat()
            }
            
            return status
            
        except Exception as e:
            self.logger.log_database_error("get_migration_status", e)
            raise MigrationError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    
    def cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."""
        try:
            self.logger.log_system_info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –º–∏–≥—Ä–∞—Ç–æ—Ä–∞")
            
            removed_dirs = self.file_ops.cleanup_empty_directories()
            if removed_dirs > 0:
                self.logger.log_system_info(f"–£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {removed_dirs}")
            
            self.db.close()
            self.logger.log_system_info("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            self.logger.log_database_error("cleanup", e)
    
    def __enter__(self):
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.cleanup()


def create_migrator(config: Config, logger: FileMigratorLogger) -> Migrator:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –º–∏–≥—Ä–∞—Ç–æ—Ä–∞."""
    return Migrator(config, logger)


# ==================== CLI –ò–ù–¢–ï–†–§–ï–ô–° ====================

class FileMigratorCLI:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ CLI."""
    
    def __init__(self):
        self.config = None
        self.logger = None
        self.migrator = None
    
    def setup(self, config_path: str = "config/settings.ini") -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç CLI —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π."""
        try:
            self.config = load_config(config_path)
            self.logger = FileMigratorLogger(self.config.logging)
            self.migrator = create_migrator(self.config, self.logger)
            
            self.logger.log_system_info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑: {config_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def cmd_migrate(self, args) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤."""
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            initial_status = self.migrator.get_migration_status()
            total_files = initial_status['database']['unmoved_files']
            
            if total_files == 0:
                print("‚úÖ –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
                return 0
            
            print(f"üöÄ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ {total_files} —Ñ–∞–π–ª–æ–≤")
            
            if args.max_files:
                stats = self.migrator.migrate_all(max_files=args.max_files)
            else:
                stats = self.migrator.migrate_all()
            
            print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.processed_files}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {stats.successful_files}")
            print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {stats.failed_files}")
            print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {stats.get_success_rate():.1f}%")
            print(f"   ‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats.get_duration():.2f} —Å–µ–∫")
            
            if stats.failed_files > 0:
                print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {stats.failed_files} –æ—à–∏–±–æ–∫:")
                for error in stats.errors[:10]:
                    print(f"   ‚Ä¢ {error['file_id']}: {error['error']}")
                if len(stats.errors) > 10:
                    print(f"   ... –∏ –µ—â–µ {len(stats.errors) - 10} –æ—à–∏–±–æ–∫")
            
            return 0 if stats.failed_files == 0 else 1
            
        except MigrationError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return 1
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()
    
    def cmd_migrate_batch(self, args) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞."""
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            batch_size = args.batch_size or self.config.migrator.batch_size
            print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞—Ç—á–∞ —Ä–∞–∑–º–µ—Ä–æ–º {batch_size}")
            
            processed, successful, failed = self.migrator.migrate_batch(batch_size)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∞—Ç—á–∞:")
            print(f"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful}")
            print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {failed}")
            
            if processed == 0:
                print("‚ÑπÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
            
            return 0 if failed == 0 else 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞—Ç—á–∞: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()
    
    def cmd_status(self, args) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            status = self.migrator.get_migration_status()
            
            print("üìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤")
            print("=" * 50)
            
            db_stats = status['database']
            print(f"\nüóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {db_stats.get('total_files', 0)}")
            print(f"   ‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {db_stats.get('moved_files', 0)}")
            print(f"   ‚Ä¢ –ù–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {db_stats.get('unmoved_files', 0)}")
            
            if db_stats.get('earliest_file_date'):
                print(f"   ‚Ä¢ –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª: {db_stats['earliest_file_date']}")
            if db_stats.get('latest_file_date'):
                print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {db_stats['latest_file_date']}")
            
            fs_stats = status['filesystem']
            print(f"\nüìÅ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:")
            print(f"   ‚Ä¢ –ù–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {fs_stats.get('unmoved_files_count', 0)}")
            print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –Ω–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö: {fs_stats.get('unmoved_files_size', 0):,} –±–∞–π—Ç")
            print(f"   ‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {fs_stats.get('moved_files_count', 0)}")
            print(f"   ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö: {fs_stats.get('moved_files_size', 0):,} –±–∞–π—Ç")
            print(f"   ‚Ä¢ –ö–∞—Ç–∞–ª–æ–≥–æ–≤ –ø–æ –¥–∞—Ç–∞–º: {fs_stats.get('date_directories_count', 0)}")
            
            total_files = db_stats.get('total_files', 0)
            moved_files = db_stats.get('moved_files', 0)
            if total_files > 0:
                progress = (moved_files / total_files) * 100
                print(f"\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏:")
                print(f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {progress:.1f}%")
                print(f"   ‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {total_files - moved_files} —Ñ–∞–π–ª–æ–≤")
            
            print(f"\n‚è∞ –í—Ä–µ–º—è: {status['timestamp']}")
            
            return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()
    
    def cmd_verify(self, args) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        try:
            if not self.migrator.initialize():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ç–æ—Ä")
                return 1
            
            sample_size = args.sample_size or 100
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä–∫–µ {sample_size} —Ñ–∞–π–ª–æ–≤...")
            
            verification_result = self.migrator.verify_migration(sample_size)
            
            print(f"\nüìã –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ:")
            print(f"   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {verification_result['total_checked']}")
            print(f"   ‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {verification_result['verified']}")
            print(f"   ‚Ä¢ –û—à–∏–±–æ–∫: {verification_result['errors']}")
            
            if verification_result['errors'] > 0:
                print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
                for detail in verification_result['details']:
                    print(f"   ‚Ä¢ {detail}")
                return 1
            else:
                print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
                return 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return 1
        finally:
            if self.migrator:
                self.migrator.cleanup()
    
    def cmd_test_connection(self, args) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î."""
        try:
            db = Database(self.config.database, self.logger)
            
            print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            if db.test_connection():
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ!")
                
                stats = db.get_migration_statistics()
                print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–î:")
                print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats.get('total_files', 0)}")
                print(f"   ‚Ä¢ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ: {stats.get('moved_files', 0)}")
                print(f"   ‚Ä¢ –ù–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ: {stats.get('unmoved_files', 0)}")
                
                return 0
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
                return 1
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            return 1
        finally:
            if 'db' in locals():
                db.close()


def create_parser() -> argparse.ArgumentParser:
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description="–ú–æ–Ω–æ–ª–∏—Ç–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ –¥–∞—Ç–∞–º",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ú–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  python migrator-mnlt.py migrate

  # –ú–∏–≥—Ä–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  python migrator-mnlt.py migrate --max-files 1000

  # –ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞
  python migrator-mnlt.py migrate-batch --batch-size 50

  # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
  python migrator-mnlt.py status

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
  python migrator-mnlt.py verify --sample-size 200

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
  python migrator-mnlt.py test-connection
        """
    )
    
    parser.add_argument(
        '--config',
        default='config/settings.ini',
        help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config/settings.ini)'
    )
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥–∞ migrate
    migrate_parser = subparsers.add_parser('migrate', help='–ú–∏–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤')
    migrate_parser.add_argument(
        '--max-files',
        type=int,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ migrate-batch
    batch_parser = subparsers.add_parser('migrate-batch', help='–ú–∏–≥—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞')
    batch_parser.add_argument(
        '--batch-size',
        type=int,
        help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ status
    subparsers.add_parser('status', help='–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –º–∏–≥—Ä–∞—Ü–∏–∏')
    
    # –ö–æ–º–∞–Ω–¥–∞ verify
    verify_parser = subparsers.add_parser('verify', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏')
    verify_parser.add_argument(
        '--sample-size',
        type=int,
        default=100,
        help='–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 100)'
    )
    
    # –ö–æ–º–∞–Ω–¥–∞ test-connection
    subparsers.add_parser('test-connection', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î')
    
    return parser


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI."""
    parser = create_parser()
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return 1
    
    cli = FileMigratorCLI()
    
    if not cli.setup(args.config):
        return 1
    
    try:
        if args.command == 'migrate':
            return cli.cmd_migrate(args)
        elif args.command == 'migrate-batch':
            return cli.cmd_migrate_batch(args)
        elif args.command == 'status':
            return cli.cmd_status(args)
        elif args.command == 'verify':
            return cli.cmd_verify(args)
        elif args.command == 'test-connection':
            return cli.cmd_test_connection(args)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())
